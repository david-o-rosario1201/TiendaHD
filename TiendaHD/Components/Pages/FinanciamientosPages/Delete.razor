@page "/DeleteFinanciamientos"
@page "/DeleteFinanciamientos/financiamientoId={financiamientoId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject FinanciamientoService financiamientoService

<PageTitle>Eliminar Financiamiento</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3 class="text-center"><strong>Eliminar Financiamiento</strong></h3>
		</div>
		@*Body*@
		<div class="card-body">
			@*Datos*@
			<ul>
				<li><strong>Detalle:</strong> @financiamiento.Detalle</li>
				<li><strong>Cuota Mensual:</strong> RD$ @financiamiento.CuotaMensual.ToString("N2")</li>
			</ul>
		</div>
		@*Footer*@
		<div class="card-footer d-flex justify-content-center">
			<div class="px-2">
				<button type="button" class="btn btn-outline-danger" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
			</div>
			<button type="button" class="btn btn-outline-dark" @onclick="Eliminar"><i class="bi bi-trash3-fill" /> Eliminar</button>
		</div>
	</div>
</div>


@code {
	[Parameter]
	public int financiamientoId { get; set; }

	public Financiamientos financiamiento { get; set; } = new Financiamientos();

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		financiamiento = await financiamientoService.Buscar(financiamientoId);
	}

	public async void Eliminar()
	{
		var eliminar = await financiamientoService.Eliminar(financiamientoId);
		if (eliminar)
		{
			await Task.Delay(1000);
			Volver();
		}

		StateHasChanged();
		await Task.Delay(2000);
	}

	void Volver()
	{
		navigation.NavigateTo("/Financiamientos");
	}
}
